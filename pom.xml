<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.3</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.suyo</groupId>
    <artifactId>muezzin-server</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>Muezzin</name>
    <description>
        <![CDATA[
        <p>As a developer, here‚Äôs some spatial text to describe the application `"Muezzin"` that I‚Äôve created:</p>
        <p>Muezzin is a web application developed using `Spring Boot 3` and Springdoc Swagger for frontend and mobile developers. The main purpose of this application is to generate the daily prayer times of Islam in the form of an image.</p>
        <p>To accurately calculate the prayer times based on the user‚Äôs location, I have utilized the `GeoIP2` library. It helps in generating prayer times by determining the user‚Äôs location using their IP address. Additionally, the Adhan library has been integrated to generate the precise prayer times.</p>
        <p>To enhance the user experience, the application generates `QR codes` for prayer times using the `Zxing` library. This allows users to easily share the prayer times with others.</p>
        <p>For better scalability and load balancing, the application uses the `Netflix Eureka` client. By default, the load balancer feature is `disabled`, but it can be enabled if desired.</p>
        <p>To support multiple languages, the application incorporates `i18n` (Internationalization). This allows users to switch between different languages to view the prayer times according to their preference.</p>
        <p>For convenient deployment, the application leverages `Google Jib` and `Dockerfile`. This enables the creation of containerized images that can be easily deployed in `Kubernetes`.</p>
        <p>Overall, Muezzin is a comprehensive application encompassing various technologies and libraries to provide accurate and user-friendly daily prayer times of Islam. By utilizing containerization and efficient deployment techniques, the application is designed to be easily deployed on any platform.</p>
    ]]>
    </description>
    <url>https://github.com/Sulaymon-Dev20/muezzin-server</url>
    <licenses>
        <license>
            <name>Apache License Version 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0</url>
        </license>
    </licenses>
    <developers>
        <developer>
            <name>ùïäùï¶ùïùùïíùï™ùïûùï†ùïü ùïêùïíùïôùï™ùï†</name>
            <email>sulaymonyahyo@icloud.com</email>
            <url>https://sulaymonyahyo.com</url>
            <roles>
                <role>that project for only improve Knowledge</role>
            </roles>
        </developer>
    </developers>
    <properties>
        <java.version>17</java.version>
        <spring-cloud.version>2022.0.4</spring-cloud.version>
        <image>sulaymonyahyo/${project.artifactId}:${project.version}</image>
        <start-class>com.suyo.muezzin.MuezzinApplication</start-class>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>com.maxmind.geoip2</groupId>
            <artifactId>geoip2</artifactId>
            <version>4.0.1</version>
        </dependency>
        <dependency>
            <groupId>com.github.ua-parser</groupId>
            <artifactId>uap-java</artifactId>
            <version>1.5.4</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.batoulapps.adhan</groupId>
            <artifactId>adhan</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>core</artifactId>
            <version>3.5.1</version>
        </dependency>
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>javase</artifactId>
            <version>3.5.1</version>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.0.4</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing-bridge-otel</artifactId>
        </dependency>
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-exporter-zipkin</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>build-docker-image</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.google.cloud.tools</groupId>
                        <artifactId>jib-maven-plugin</artifactId>
                        <version>3.1.4</version>
                        <configuration>
                            <to>
                                <tags>
                                    <tag>latest</tag>
                                </tags>
                            </to>
                            <from>
                                <image>
                                    eclipse-temurin:17@sha256:2b47a8ea946ce1e5365a1562414ed576e378b7b670cadff3fb98ebecf2890cdc
                                </image>
                                <platforms>
                                    <platform>
                                        <architecture>arm64</architecture>
                                        <os>linux</os>
                                    </platform>
                                    <platform>
                                        <architecture>amd64</architecture>
                                        <os>linux</os>
                                    </platform>
                                </platforms>
                            </from>
                            <container>
                                <ports>
                                    <port>5677</port>
                                </ports>
                            </container>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
